package second

import (
	"net/http"
	"fmt"
	"io/ioutil"
	"encoding/json"
	log "github.com/Sirupsen/logrus"
)

// Use https://mholt.github.io/json-to-go/ to generate struct from result
type AutoGenerated struct {
	RestResponse struct {
			     Messages []string `json:"messages"`
			     Result []struct {
				     Name string `json:"name"`
				     Alpha2Code string `json:"alpha2_code"`
				     Alpha3Code string `json:"alpha3_code"`
			     } `json:"result"`
		     } `json:"RestResponse"`
}

func CallWS() error {
	resp, err := http.Get("http://services.groupkt.com/country/get/all")

	if err != nil {
		fmt.Println("Go out!")
		return err
	}
	// Don't forget to close your file descriptor after your call
	defer resp.Body.Close()

	var buffer [] byte
	buffer, err = ioutil.ReadAll(resp.Body)

	if err != nil {
		fmt.Println("Read buffer error")
		return err
	}
	// Convert bytes array to string?
	//fmt.Println(string(buffer))

	// Get messages value . Interface : generic object
	var message interface{}
	err = json.Unmarshal(buffer,&message)

	if err != nil {
		fmt.Println("Unmarshal error")
		return err
	}
	// For debug, print raw result
	//fmt.Println(message)
	log.Warn(message)

	// Unmarshall into my struct
	var message2 AutoGenerated
	err = json.Unmarshal(buffer,&message2)

	if err != nil {
		fmt.Println("Unmarshal error")
		return err
	}
	// Print only messages
	log.Info(fmt.Println(message2.RestResponse.Messages[0]))

	// Print countries
	for i,v := range message2.RestResponse.Result {
		log.Debug("key:",i," value: ",v.Name)
	}
	return nil
}
